#! /usr/bin/env node

const undici = require('undici');
var zibar = require('zibar');
var opt = require('minimist')(process.argv.slice(2));

var target = opt._[0];
var clients = opt.c || opt.clients || 100;
var draw_graph = opt.g || opt.graph;
var post = opt.p || opt.post || undefined;
var headers = opt.H || opt.header || undefined;
var failingStatus = opt.F || opt.fail || undefined;
var successStatus = opt.S || opt.success || undefined;
var method = 'GET';
if (post !== undefined) {
	method = 'POST';
}

if (headers && typeof headers == 'string') {
	headers = [ headers ];
	var tmp = {};
	headers.forEach(function(x) {
		var h = x.split(':');
		var key = h[0].replace(/^\s+|\s+$/g,'');
		var val = h[1].replace(/^\s+|\s+$/g,'');
		tmp[key] = val;
	});
	headers = tmp;
}

if (failingStatus) {
	failingStatus = (failingStatus+'').split(',');
	tmp = {};
	failingStatus.forEach(function(x) {
		tmp[x] = true;
	});
	failingStatus = tmp;
}

if (successStatus) {
	successStatus = (successStatus+'').split(',');
	tmp = {};
	successStatus.forEach(function(x) {
		tmp[x] = true;
	});
	successStatus = tmp;
}

if (typeof draw_graph == 'string' && target === undefined) {
	target = draw_graph;
	draw_graph = true;
}

if (target === undefined || opt.help || opt.h) {
	console.log(help());
	process.exit();
}

var test_clients = [];
var latencies = [];
var request_per_second = [];

var success = 0;
var failures = 0;

function help () {
return `Usage: httpstress [options] <url>

Options:
  -c, --clients <number>
         Number of clients to launch. (default 100)
  -F, --fail <status list>
         Status numbers to consider as failure. Eg: '404,500'
  -g, --graph
         Draw graph when running
  -h, --help
         Print this help and exit
  -H, --header <header>
         Define a header as 'Key: value' pair. Note that you can
         specify this option multiple times.
         Eg: 'Content-Type: application/json'
  -p, --post <data>
         Perform a POST request instead of a GET.
  -S, --success <status list>
         Status numbers to consider as successful response. All other
         response status will be considered failures if this option is
         specified. This overrides -F.
  
Example:
  httpstress -g -c 100 \\
    -H 'Cookie: session=12345' \\
    -F '400,401,403,404,500' \\
      http://example.com/test
`;
}

function TestClient (url) {
	this.running = true;
	
	this.run(url);
}

TestClient.prototype = {
	run: function (url) {
		var self = this;
		var start = Date.now();
		var options = {
			method: method
		};
		
		if (headers) {
			options.headers = headers;
		}
		
		if (method == 'POST' && post != '') {
			options.body = post;
		}
		
		undici.request(url,options).then(res => {
			if (!failingStatus && !successStatus) {
				success++;
			}
			else {
				if (successStatus) {
					if (successStatus[res.statusCode]) {
						success++;
					}
					else {
						failures++;
					}
				}
				else {
					if (failingStatus[res.statusCode]) {
						failures++;
					}
					else {
						success++;
					}
				}
			}
			var end = Date.now();
			latencies.push(end-start);
			
			if (self.running) {
				self.run(url);
			}
		})
		.catch(err => {
			failures++;
			if (self.running) {
				self.run(url);
			}
		});
	},
	stop: function () {
		this.running = false;	
	}
}

// var spinner = '/-\|';
// var spinner = '.oOo';
// var spinner = '.oO0Oo';
// var spinner = '←↖↑↗→↘↓↙';
var spinner = '◐◓◑◒';
var start = Date.now();
var status = ' ...';
var n = 0;
var killer = 0;
var margin = 15;

function displayStats () {
	n = (n+1) % spinner.length;
	killer = (killer+1) % 50;
	
	if (n == 0) {
		var now = Date.now();
		var total = success+failures;
		var rps = Math.round(success / ((now - start)/1000));
		request_per_second.push(rps);
		
		status = ' Requests per second: ' + rps + ', total: ' + total;
		
		if (draw_graph) {
			status = ' ' + method + ' ' + target + '\n  ' + status;
		}
		
		if (failures > 0) {
			status += ' (' + failures + ' failures)';
		}
		
		if (latencies.length > 0) {
			var averageLatency = latencies.reduce((a,x)=>a+x)/latencies.length;
			var maxLatency = latencies.reduce((a,x)=>a>x?a:x);
			latencies.splice(0,latencies.length-clients);
			
			status += ', latency: avg=' + averageLatency.toFixed(0) + 'ms' +
				' max=' + maxLatency + 'ms';
		}
	}
	
	if (killer == 0) {
		test_clients.shift().stop();
		test_clients.push(new TestClient(target));
	} 
	
	var col = process.stdout.columns;
	var orig = 0;
	var offset = 0;
	var graph = '';
	var home = '\r';
	
	if (draw_graph) {
		home = '\033[H';
		if (request_per_second.length > 0) {
			if ((request_per_second.length + margin) > col) {
				orig = request_per_second.length - col + margin;
				offset = 5 - (orig % 5);
			}
			graph = '\n\n' + zibar(request_per_second.slice(margin-col),{
				color: 'green',
				xAxis: {
					origin: orig,
					offset: offset
				},
				min: 0
			});
		}
	}
	
	process.stdout.write(home + ' ' + spinner[n] + status + '      ' + graph);
}

for (var i=0; i<clients; i++) {
	test_clients.push(new TestClient(target));
}

if (draw_graph) {
	process.stdout.write('\033[2J');
}
setInterval(displayStats, 100);

